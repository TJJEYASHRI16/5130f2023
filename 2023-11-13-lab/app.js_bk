//jshint esversion:6
// require("dotenv").config();
const express = require("express");
const ejs = require("ejs");
const bodyParser = require("body-parser");
const mongoose = require("mongoose");
// const bcrypt = require("bcrypt");
// const saltRounds = 7;
const expressSession = require("express-session");
const passport = require("passport");
const passportLocal = require("passport-local");
const passportMongoose = require("passport-local-mongoose");
const GoogleStrategy = require('passport-google-oauth20').Strategy;
const findOrCreate = require('mongoose-find-or-create');




const app = express();

app.use(express.static("public"));
app.set('view engine' , 'ejs');

app.use(bodyParser.urlencoded({extended:true}));

//must be in this order session , passport 
app.use(expressSession({
    secret: 'thisisaverylongsecretstring.',
    resave: false,
    saveUninitialized: false
  }));
  app.use(passport.initialize());
  app.use(passport.session());
mongoose.connect("mongodb://127.0.0.1:27017/userDB");

const UserSchema = new mongoose.Schema({
    email:String,
    password:String,
    googleId: String,
    secret:String
});



// UserSchema.plugin(encrypt, {secret:process.env.SECRET , encryptedFields:["password"] });
UserSchema.plugin(passportMongoose);
UserSchema.plugin(findOrCreate);

const User = new mongoose.model("user" , UserSchema);

passport.use(User.createStrategy());

// passport.serializeUser(User.serializeUser());
// passport.deserializeUser(User.deserializeUser());
passport.serializeUser((user, done) => {
    done(null, user.id);
});

passport.deserializeUser((id, done) => {
    User.findById(id)
        .then(user => {
            done(null, user);
        })
        .catch(err => {
            done(err, null);
        });
});

passport.use(new GoogleStrategy({
    clientID: process.env.CLIENT_ID,
    clientSecret: process.env.CLIENT_SECRET,
    callbackURL: "http://localhost:3000/auth/google/secrets"
  },
  async (accessToken, refreshToken, profile, done) => {
    console.log(profile);
    try {
      const user = await User.findOneAndUpdate(
        { googleId: profile.id },
        { googleId: profile.id }, // Make sure to update the googleId field
        { upsert: true, new: true }
      );
      return done(null, user);
    } catch (error) {
      return done(error, null);
    }
  }
));



app.get("/" , function(req,res){
    res.render("home");
});
app.get('/auth/google',
  passport.authenticate('google', { scope: ['profile'] }));

 



  app.get('/auth/google/secrets', 
  passport.authenticate('google', { failureRedirect: '/login' }),
  function(req, res) {
    // Successful authentication, redirect home.
    res.redirect("/secrets");
  });

app.route("/login")
.get(function(req,res){
    res.render("login");
})
.post(async function(req,res){
    // const email = req.body.username;
    // const password = req.body.password;
    // const existUser = await User.findOne({email:email});
    // bcrypt.compare(password, existUser.password, function(err, result) {
    //     if(result===true){
    //         res.render("secrets");
    //     }else{
    //         res.send("Invalid Username and Password. Check again");
    //     }
    // });
    
    const newUser = new User({
                username : req.body.username,
                password: req.body.password
            
            });
            //this method comes from passport
    req.login(newUser,function(err){
        if(err){
            console.log(err);
            res.redirect("/register");
        }else{
            passport.authenticate("local")(req ,res ,function(){
                res.redirect("/secrets");
                });
        }
    })
   
      
    
});

app.route("/register")
.get(async function(req,res){
    res.render("register");
})
.post(async function(req,res){

    // bcrypt.hash(req.body.password,saltRounds, function(err,hash){
    //     const newUser = new User({
    //         email : req.body.username,
    //         password: hash
        
    //     });
        
    //     newUser.save();
    //     res.render("secrets");
    // });

    User.register({username:req.body.username}, req.body.password, function(err, user) {
        if (err) {
            console.log(err);
            res.redirect("/register");
          
        }else{
            passport.authenticate("local")(req ,res ,function(){
            res.redirect("/secrets");
            });
        }    
      });


});


app.get("/secrets",async function (req,res){
    // if(req.isAuthenticated()){
    //     res.render("secrets");
    // }else{
    //     res.redirect("/login");
    // }
    const foundUser = await User.find({"secret": { $ne: null }});
    res.render("secrets",{userwithsecrets : foundUser});
});


app.get("/submit",function (req,res){
    if(req.isAuthenticated()){
        res.render("submit");
    }else{
        res.redirect("/login");
    }
});

app.post("/submit",async function (req,res){
    const submitSecret = req.body.secret;
   const username=req.user.id;
  const foundUser= await User.findById(username);
  foundUser.secret=submitSecret;
  foundUser.save();
  res.redirect("secrets");
   
});


app.get('/logout', function(req, res, next){
    req.logout(function(err) {
      if (err) { return next(err); }
      res.redirect('/');
    });
  });

app.listen("3000" , function(){
    console.log("Server started");
})



